---
layout: post
title: "What is the difference between art and design?"
date: 2014-11-11 01:09:00 +0900
comments: true
categories: デザイン
tags: [デザイン]
description: ViewModelで簡単にLOB開発できるようなソリューションを目指します。
keywords: uENLaboratory
---

WPFでテンプレートやスタイルに入る前に、ぜひ[紹介したい記事]があります。


“What is the difference between art and design?”（デザインとアートの違いとは何か？）


<!-- more -->


> この質問は、米国で初級デザインクラスを受ける学生達が、教授達から頻繁に投げかけられる問いの1つです。


> デザインを習い始めた学生の多くは、デザインとアートを混同しているためです。デザインとアートの間には、決定的な違いあります。

これに対する回答は

> ”Design solves a problem, art is expression”（デザインとは問題解決であり、アートとは自己表現である。）

とあります。

> Why?をBecauseで説明出来なければ、それは明らかにデザインではないということなのです。何となく、個人的に好きだから、感覚で、といった理由を述べた時点でそれはアート（自己表現）であり、デザイン（問題解決）ではありません。それは言い換えると、問題と向き合い、それを解決する中で生まれたモノのみがデザインであるということでもあります。


昔から今に至るまで日本の職人さんたちによる ものづくりの世界では当たり前のことかもしれません。

たとえば、鉛筆の形状が正六角形なのはどうして？という問いに

 + 鉛筆の先は3本の指をほぼ等間隔にして持つため、断面が3の倍数角形や円以外だと、指が稜に当たってしまう。
 + 正六角形の鉛筆は、同じ量の木材から多く作ることができる。円はそれに次ぐ（ただし、3の倍数に限らなければ、正方形が最も効率がいい）。
 + 円形の鉛筆は、傾いた面に置くと転がってしまう。

と職人さん＠wikiは答えてくれるのでしょう。


ユーザーの体感する利便性　+　ビジネス上のメリットが見事に融合しています。


現在でも車のインテリア、携帯端末、ゲームのコントローラーなど、サイズや配置をユーザー利便性+コストカットを意識してデザインを突き詰めていると思います。

全てに意味があり極限まで余計なものをそぎ落とし、それでいて魅力のある外観です。

初めて乗る車であっても、エアコンのつけ方が直観でわからなくて説明書を読むようなことはまずないでしょう。


UX（ユーザーが体感する利便性）などよく聞きますが、LOB開発の画面レイアウトや配置に
果たしてどれだけの人が“デザイン”を考えているでしょう？


たとえば、ボタンについて考えてみます。  
コレです。


![wpf-05-01]


Windows7まで採用されているAeroスタイルが適用されています。  

 + 丸みを帯びた枠線
 + 色はグラデーションがかかり
 + ボタンを押下すると凹み、
 + マウスを上げるともとに戻る

現実世界のボタンに似せたスタイルになっています。

果たしてこれに、ユーザーが体験する利便性や楽しみ、ビジネス上のメリットを説明するとなるとどうでしょう。


マイクロソフトは同じアプリをWindows8で実行すると、こう回答してくれます。


![wpf-05-02]


もっと言うと、Windowsストアアプリをダウンロードすると、もうこのようなボタンでさえ、見つけることは難しいでしょう。

昔はスキューモフィズムといわれる、現実世界にデザインを似せることが良いとされてきました。

Windows8以降はフラットデザイン、Modernスタイルなどと言われますが、これは当初ロンドンの地下鉄標識を基調として発展したとあります。

そこから、極限まで無駄をそぎ落とし、それでいてモダンなスタイルを表現してくれるデザインがフラットデザインになります。

たとえば、乗換ストアアプリを利用してみると


![wpf-05-03]

不要なラベル枠線やグラデーションなどありません。  
とても直観的に入力できます。  


![wpf-05-04]


このアプリに利用マニュアルは必要ないでしょう。  

Windows8が出て、Apple、Amazon（Gitはとても素晴らしい）など大手でフラットデザインではないものはないと思います。

ところがどうして、最もUXを考えなければならないLOB開発の現場では、まだこれがスタンダードだとは言えないと思います。

デザインとアートを混同していることも多いでしょう。


ただし、私たちにはXAMLという強力な道具があります。  
それに対して、開発者がWPFテクノロジーを意識せずとも適用できるのがスタイルでありテンプレートです。


こういった背景を踏まえた上で、次回以降にスタイルとテンプレート紹介したいと思います。


---

[紹介したい記事]:http://blog.btrax.com/jp/2012/03/17/what-i-learned-from-design-education/



[wpf-05-01]:http://s-ueno.github.io/images/wpf-05-01.png
[wpf-05-02]:http://s-ueno.github.io/images/wpf-05-02.png
[wpf-05-03]:http://s-ueno.github.io/images/wpf-05-03.png
[wpf-05-04]:http://s-ueno.github.io/images/wpf-05-04.png
